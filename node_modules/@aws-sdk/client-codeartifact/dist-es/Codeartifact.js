import { __extends } from "tslib";
import { CodeartifactClient } from "./CodeartifactClient";
import { AssociateExternalConnectionCommand, } from "./commands/AssociateExternalConnectionCommand";
import { CopyPackageVersionsCommand, } from "./commands/CopyPackageVersionsCommand";
import { CreateDomainCommand, } from "./commands/CreateDomainCommand";
import { CreateRepositoryCommand, } from "./commands/CreateRepositoryCommand";
import { DeleteDomainCommand, } from "./commands/DeleteDomainCommand";
import { DeleteDomainPermissionsPolicyCommand, } from "./commands/DeleteDomainPermissionsPolicyCommand";
import { DeletePackageVersionsCommand, } from "./commands/DeletePackageVersionsCommand";
import { DeleteRepositoryCommand, } from "./commands/DeleteRepositoryCommand";
import { DeleteRepositoryPermissionsPolicyCommand, } from "./commands/DeleteRepositoryPermissionsPolicyCommand";
import { DescribeDomainCommand, } from "./commands/DescribeDomainCommand";
import { DescribePackageCommand, } from "./commands/DescribePackageCommand";
import { DescribePackageVersionCommand, } from "./commands/DescribePackageVersionCommand";
import { DescribeRepositoryCommand, } from "./commands/DescribeRepositoryCommand";
import { DisassociateExternalConnectionCommand, } from "./commands/DisassociateExternalConnectionCommand";
import { DisposePackageVersionsCommand, } from "./commands/DisposePackageVersionsCommand";
import { GetAuthorizationTokenCommand, } from "./commands/GetAuthorizationTokenCommand";
import { GetDomainPermissionsPolicyCommand, } from "./commands/GetDomainPermissionsPolicyCommand";
import { GetPackageVersionAssetCommand, } from "./commands/GetPackageVersionAssetCommand";
import { GetPackageVersionReadmeCommand, } from "./commands/GetPackageVersionReadmeCommand";
import { GetRepositoryEndpointCommand, } from "./commands/GetRepositoryEndpointCommand";
import { GetRepositoryPermissionsPolicyCommand, } from "./commands/GetRepositoryPermissionsPolicyCommand";
import { ListDomainsCommand } from "./commands/ListDomainsCommand";
import { ListPackagesCommand, } from "./commands/ListPackagesCommand";
import { ListPackageVersionAssetsCommand, } from "./commands/ListPackageVersionAssetsCommand";
import { ListPackageVersionDependenciesCommand, } from "./commands/ListPackageVersionDependenciesCommand";
import { ListPackageVersionsCommand, } from "./commands/ListPackageVersionsCommand";
import { ListRepositoriesCommand, } from "./commands/ListRepositoriesCommand";
import { ListRepositoriesInDomainCommand, } from "./commands/ListRepositoriesInDomainCommand";
import { ListTagsForResourceCommand, } from "./commands/ListTagsForResourceCommand";
import { PutDomainPermissionsPolicyCommand, } from "./commands/PutDomainPermissionsPolicyCommand";
import { PutPackageOriginConfigurationCommand, } from "./commands/PutPackageOriginConfigurationCommand";
import { PutRepositoryPermissionsPolicyCommand, } from "./commands/PutRepositoryPermissionsPolicyCommand";
import { TagResourceCommand } from "./commands/TagResourceCommand";
import { UntagResourceCommand, } from "./commands/UntagResourceCommand";
import { UpdatePackageVersionsStatusCommand, } from "./commands/UpdatePackageVersionsStatusCommand";
import { UpdateRepositoryCommand, } from "./commands/UpdateRepositoryCommand";
var Codeartifact = (function (_super) {
    __extends(Codeartifact, _super);
    function Codeartifact() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Codeartifact.prototype.associateExternalConnection = function (args, optionsOrCb, cb) {
        var command = new AssociateExternalConnectionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Codeartifact.prototype.copyPackageVersions = function (args, optionsOrCb, cb) {
        var command = new CopyPackageVersionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Codeartifact.prototype.createDomain = function (args, optionsOrCb, cb) {
        var command = new CreateDomainCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Codeartifact.prototype.createRepository = function (args, optionsOrCb, cb) {
        var command = new CreateRepositoryCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Codeartifact.prototype.deleteDomain = function (args, optionsOrCb, cb) {
        var command = new DeleteDomainCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Codeartifact.prototype.deleteDomainPermissionsPolicy = function (args, optionsOrCb, cb) {
        var command = new DeleteDomainPermissionsPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Codeartifact.prototype.deletePackageVersions = function (args, optionsOrCb, cb) {
        var command = new DeletePackageVersionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Codeartifact.prototype.deleteRepository = function (args, optionsOrCb, cb) {
        var command = new DeleteRepositoryCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Codeartifact.prototype.deleteRepositoryPermissionsPolicy = function (args, optionsOrCb, cb) {
        var command = new DeleteRepositoryPermissionsPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Codeartifact.prototype.describeDomain = function (args, optionsOrCb, cb) {
        var command = new DescribeDomainCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Codeartifact.prototype.describePackage = function (args, optionsOrCb, cb) {
        var command = new DescribePackageCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Codeartifact.prototype.describePackageVersion = function (args, optionsOrCb, cb) {
        var command = new DescribePackageVersionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Codeartifact.prototype.describeRepository = function (args, optionsOrCb, cb) {
        var command = new DescribeRepositoryCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Codeartifact.prototype.disassociateExternalConnection = function (args, optionsOrCb, cb) {
        var command = new DisassociateExternalConnectionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Codeartifact.prototype.disposePackageVersions = function (args, optionsOrCb, cb) {
        var command = new DisposePackageVersionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Codeartifact.prototype.getAuthorizationToken = function (args, optionsOrCb, cb) {
        var command = new GetAuthorizationTokenCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Codeartifact.prototype.getDomainPermissionsPolicy = function (args, optionsOrCb, cb) {
        var command = new GetDomainPermissionsPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Codeartifact.prototype.getPackageVersionAsset = function (args, optionsOrCb, cb) {
        var command = new GetPackageVersionAssetCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Codeartifact.prototype.getPackageVersionReadme = function (args, optionsOrCb, cb) {
        var command = new GetPackageVersionReadmeCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Codeartifact.prototype.getRepositoryEndpoint = function (args, optionsOrCb, cb) {
        var command = new GetRepositoryEndpointCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Codeartifact.prototype.getRepositoryPermissionsPolicy = function (args, optionsOrCb, cb) {
        var command = new GetRepositoryPermissionsPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Codeartifact.prototype.listDomains = function (args, optionsOrCb, cb) {
        var command = new ListDomainsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Codeartifact.prototype.listPackages = function (args, optionsOrCb, cb) {
        var command = new ListPackagesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Codeartifact.prototype.listPackageVersionAssets = function (args, optionsOrCb, cb) {
        var command = new ListPackageVersionAssetsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Codeartifact.prototype.listPackageVersionDependencies = function (args, optionsOrCb, cb) {
        var command = new ListPackageVersionDependenciesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Codeartifact.prototype.listPackageVersions = function (args, optionsOrCb, cb) {
        var command = new ListPackageVersionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Codeartifact.prototype.listRepositories = function (args, optionsOrCb, cb) {
        var command = new ListRepositoriesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Codeartifact.prototype.listRepositoriesInDomain = function (args, optionsOrCb, cb) {
        var command = new ListRepositoriesInDomainCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Codeartifact.prototype.listTagsForResource = function (args, optionsOrCb, cb) {
        var command = new ListTagsForResourceCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Codeartifact.prototype.putDomainPermissionsPolicy = function (args, optionsOrCb, cb) {
        var command = new PutDomainPermissionsPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Codeartifact.prototype.putPackageOriginConfiguration = function (args, optionsOrCb, cb) {
        var command = new PutPackageOriginConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Codeartifact.prototype.putRepositoryPermissionsPolicy = function (args, optionsOrCb, cb) {
        var command = new PutRepositoryPermissionsPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Codeartifact.prototype.tagResource = function (args, optionsOrCb, cb) {
        var command = new TagResourceCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Codeartifact.prototype.untagResource = function (args, optionsOrCb, cb) {
        var command = new UntagResourceCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Codeartifact.prototype.updatePackageVersionsStatus = function (args, optionsOrCb, cb) {
        var command = new UpdatePackageVersionsStatusCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    Codeartifact.prototype.updateRepository = function (args, optionsOrCb, cb) {
        var command = new UpdateRepositoryCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    return Codeartifact;
}(CodeartifactClient));
export { Codeartifact };
